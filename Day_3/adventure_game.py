import random
from datetime import datetime

from_number = 0
to_number = 0
health = 0

def main():
    if input(
            '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è –≤ —É–≥–∞–¥–∞–π–∫–µ! –ù–µ —Ö–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–≤–æ–∏ —Å–∏–ª—ã? (–í–≤–µ–¥–∏ "–¥–∞", –µ—Å–ª–∏ —Ö–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å)\n').lower() in [
        '–¥–∞', 'lf']:
        rules()
    else:
        if input('–¢—ã —É–≤–µ—Ä–µ–Ω —á—Ç–æ –Ω–µ —Ö–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å? –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª –Ω–∞–ø–∏—à–∏ "–Ω–µ—Ç"\n').lower() in ['–Ω–µ—Ç', 'ytn']:
            rules()
        else:
            surrender()

# region –æ—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å –∏–≥—Ä—ã

def new_run():
    if input('–•–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞? (–í–≤–µ–¥–∏ "–¥–∞", –µ—Å–ª–∏ —Ö–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å)\n').lower() not in ['–¥–∞', 'lf']:
        return
    from_number = random.randint(0, 50)
    to_number = random.randint(50, 100)
    health = random.randint(1, 10)
    print('–°–º–æ—Ç—Ä–∏, —è –∫–æ—Ä–æ—á–µ –∑–∞–≥–∞–¥—ã–≤–∞—é —á–∏—Å–ª–æ –æ—Ç', from_number, '–¥–æ', to_number, '–∏ —Ç—ã –¥–æ–ª–∂–µ–Ω —É–≥–∞–¥–∞—Ç—å –µ–≥–æ –∑–∞', health,
          word_convertation(health))
    if input(
            '–ê —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ "–≥–æ—Ç–æ–≤", –µ—Å–ª–∏ —Ç—ã –≥–æ—Ç–æ–≤ –∫ –∏–≥—Ä–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –¥—Ä—É–≥–æ–µ, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –∑–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É\n').lower() in [
        '–≥–æ—Ç–æ–≤', 'ujnjd']:
        game(from_number, to_number, health)
    else:
        surrender()
    return


def rules():
    from_number = random.randint(0, 50)
    to_number = random.randint(50, 100)
    health = random.randint(1, 10)
    print('–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π —è –æ–±—ä—è—Å–Ω—é —Ç–µ–±–µ –ø—Ä–∞–≤–∏–ª–∞')
    print('–°–º–æ—Ç—Ä–∏, —è –∫–æ—Ä–æ—á–µ –∑–∞–≥–∞–¥—ã–≤–∞—é —á–∏—Å–ª–æ –Ω–∞—Ä–∏–º–µ—Ä ... –æ—Ç', from_number, '–¥–æ', to_number, '–∏ —Ç—ã –¥–æ–ª–∂–µ–Ω —É–≥–∞–¥–∞—Ç—å –µ–≥–æ –∑–∞',
          health, word_convertation(health))
    if input(
            '–ê —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ "–≥–æ—Ç–æ–≤", –µ—Å–ª–∏ —Ç—ã –≥–æ—Ç–æ–≤ –∫ –∏–≥—Ä–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –¥—Ä—É–≥–æ–µ, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –∑–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É\n').lower() in [
        '–≥–æ—Ç–æ–≤', 'ujnjd']:
        game(from_number, to_number, health)
    else:
        surrender()
    return


def game(from_number, to_number, health):
    speedrun_phrases = ['–î–∞ —Ç—ã —Å–ø–∏–¥—Ä–∞–Ω–µ—Ä! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å —Ç–∞–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ–π –ø–æ–±–µ–¥–æ–π',
                        '–í–æ—Ç —ç—Ç–æ —Å–∫–æ—Ä–æ—Å—Ç—åüò≥, —Å–µ–≥–æ–¥–Ω—è —Ç–æ—á–Ω–æ –≤ –∫–∞–∑–∏–Ω–æ!',
                        '–û–≥–æ-–≥–æ-–≥–æ –∫–∞–∫–∏–µ –º—ã –±—ã—Å—Ç—Ä—ã–µ, –º–æ–∂–µ—Ç –Ω–∞ –±–∏—Ç–≤—É —ç–∫—Å—Ç—Ä–∞—Å–µ–Ω—Å–æ–≤?']
    normalrun_phrases = ['–ú–æ–ª–æ–¥–µ—Ü, —Ö–æ—Ä–æ—à–∞—è –∏–≥—Ä–∞!', '–¢—ã —á–µ—Ä—Ç–æ–≤—Å–∫–∏ –ø—Ä–∞–≤, –æ—Ç–ª–∏—á–Ω–æ —Å—ã–≥—Ä–∞–Ω–æ',
                         '–ú–µ–≥–∞-—Ö–æ—Ä–æ—à, –ø–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –ø–æ–±–µ–¥–æ–π']
    slowrun_phrases = ['–î–∞ —É–∂, –ª—É—á—à–µ –ø–æ–∑–¥–Ω–æ —á–µ–º –Ω–∏–∫–æ–≥–¥–∞üòÖ',
                       '–¢–µ–±–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ –Ω—É–∂–Ω–æ –≥–¥–µ-—Ç–æ –ø—Ä–æ–∫–∞—á–∞—Ç—å —Å–≤–æ–∏ —ç–∫—Å—Ç—Ä–∞—Å–µ–Ω—Å–æ—Ä–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏',
                       '–ö–∞–∂–µ—Ç—Å—è —è –≤–∑–¥—Ä–µ–º–Ω—É–ª –ø–æ–∫–∞ —Ç—ã –∏—Å–∫–∞–ª –æ—Ç–≤–µ—Çü•±, –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ - —Å–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É']
    miss_high = ['–°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–æ, –Ω–∞–¥—Ä–æ –±—Ä–∞—Ç—å –ø–æ–Ω–∏–∂–µ', '–ß–µ–ª, –±–µ—Ä–∏ –Ω–∏–∂–µ', '–ù–∞–¥–æ –≤—ã–±—Ä–∞—Ç—å —á–∏—Å–ª–æ –ø–æ–º–µ–Ω—å—à–µ']
    close_miss_high = ['–¢—ã –±–ª–∏–∑–∫–æ! –í–æ–∑—å–º–∏ –Ω–µ–º–Ω–æ–≥–æ –Ω–∏–∂–µ', '–û—á–µ–Ω—å –≥–æ—Ä—è—á–æ, –≤—ã–±–µ—Ä–∏ —á–∏—Å–ª–æ –ø–æ–º–µ–Ω—å—à–µ',
                       '–¢–µ–ø–ª–æ-—Ç–µ–ø–ª–æ, –æ—Å—Ç–∞–ª–æ—Å—å —Å–ø—É—Å—Ç–∏—Ç—å—Å—è –Ω–µ–º–Ω–æ–≥–æ –Ω–∏–∂–µ']
    miss_low = ['–°–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–æ, –Ω–∞–¥—Ä–æ –±—Ä–∞—Ç—å –ø–æ–≤—ã—à–µ', '–ß–µ–ª, –±–µ—Ä–∏ –≤—ã—à–µ', '–ù–∞–¥–æ –≤—ã–±—Ä–∞—Ç—å —á–∏—Å–ª–æ –ø–æ–±–æ–ª—å—à–µ']
    close_miss_low = ['–¢—ã –±–ª–∏–∑–∫–æ! –í–æ–∑—å–º–∏ –Ω–µ–º–Ω–æ–≥–æ –≤—ã—à–µ', '–û—á–µ–Ω—å –≥–æ—Ä—è—á–æ, –≤—ã–±–µ—Ä–∏ —á–∏—Å–ª–æ –ø–æ–±–æ–ª—å—à–µ',
                      '–¢–µ–ø–ª–æ-—Ç–µ–ø–ª–æ, –æ—Å—Ç–∞–ª–æ—Å—å –∑–∞–±—Ä–∞—Ç—å—Å—è –Ω–µ–º–Ω–æ–≥–æ –≤—ã—à–µ']
    so_close = ['–ê-–ê-–ê-–ê –ì–û–†–Ø–ß–û!!!', '–ú–ù–ï –ö–ê–ñ–ï–¢–°–Ø –ú–´ –í –ñ–ï–†–õ–ï –í–£–õ–ö–ê–ù–ê', '–Ø–î–†–û –ó–ï–ú–õ–ò –î–ê–ñ–ï –ë–õ–ò–ó–ö–û –ù–ï –¢–ê–ö–û–ï –¢–ï–ü–õ–û–ï']
    right_number = random.randint(from_number, to_number + 1)
    print(f'–í –æ–±—â–µ–º —É —Ç–µ–±—è {health} {word_convertation(health)}, —É–¥–∞—á–∏!')
    while health > 0:
        choosed_number = int(input())
        if choosed_number == right_number and health < 2:
            print(random.choice(speedrun_phrases))
            new_run()
            break
        elif choosed_number == right_number and 2 < health < 7:
            print(random.choice(normalrun_phrases))
            new_run()
            break
        elif choosed_number == right_number and 7 < health < 10:
            print(random.choice(slowrun_phrases))
            new_run()
            break
        else:
            if right_number - 1 < choosed_number < right_number + 1:
                print(random.choice(so_close))
                health -= 1
            elif right_number - 5 <= choosed_number < right_number:
                print(random.choice(close_miss_low))
                health -= 1
            elif choosed_number < right_number - 5:
                print(random.choice(miss_low))
                health -= 1
            elif right_number < choosed_number <= right_number + 5:
                print(random.choice(close_miss_high))
                health -= 1
            elif choosed_number > right_number + 5:
                print(random.choice(miss_high))
                health -= 1
    dead()
    new_run()
    return


# endregion

# region —Ñ–∏–Ω–∞–ª –∏–≥—Ä—ã

def dead():
    now = datetime.now()
    current_time = now.strftime("%H:%M:%S")
    sign = input('–¢—ã –ø–æ–≥–∏–± —á–µ—Å—Ç—å—é —Ö—Ä–∞–±—Ä—ã—Ö, –æ—Å—Ç–∞–≤—å —Å–≤–æ—é –ø–æ–¥–ø–∏—Å—å: ')
    print('‚£ø‚£ø‚°ø‚£´‚£æ‚†è‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢Ä‚£Ä‚£Ä‚£Ä‚£Ä‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ',
          '‚£ø‚°á‚†±‚†â‚†Å‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢Ä‚£Ä‚£§‚£∂‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£¶‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ',
          '‚£ø‚°á‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢Ä‚£†‚£õ‚°©‚£©‚£≠‚°π‚£ø‚£ø‚£ø‚£ø‚†û‚£õ‚£õ‚£õ‚°≤‚£ø‚°á‚†Ñ‚†Ñ‚†Ñ‚†Ñ',
          '‚£ø‚°á‚†Ñ‚†Ñ‚†Ñ‚°æ‚£°‚£æ‚£ø‚£∑‚£π‚£ø‚£ø‚°ø‚£™‚°ª‚†ü‚£±‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚°π‚†Ñ‚†Ñ‚†Ñ‚†Ñ',
          '‚£ø‚°á‚†Ñ‚†Ñ‚£º‚°á‚£ø‚£ª‚£ø‚†ü‚°õ‚¢ø‚£ø‚£æ‚£ø‚°á‚¢∞‚£ç‚¢ª‚°ø‚†õ‚¢ø‚£ø‚°≠‚£ø‚£∑‚†Ñ‚†Ñ‚†Ñ',
          '‚£ø‚£ß‚£Ñ‚°Ä‚£ø‚°á‚£Æ‚£Ω‚£ø‚£Æ‚£â‚£æ‚£ø‚£ø‚£ø‚£á‚°∏‚£ø‚£ø‚£Ü‚†õ‚£∞‚£ø‚£æ‚°ø‚£ø‚†Ñ‚†Ñ‚†Ñ',
          '‚£ø‚£á‚°º‚£Ñ‚£ø‚£ø‚°Ñ‚†ô‚¢ø‚£è‚£ø‚£ø‚°Æ‚†Å‚£â‚£æ‚£∑‚°à‚†É‚¢ø‚£ø‚£¨‚°≠‚†ù‚£Ä‚£ø‚†Ñ‚†Ñ‚†ê',
          '‚°Ü‚°á‚£π‚£ø‚£ø‚£ø‚£ø‚°ø‚†ì‚†õ‚£â‚£â‚£â‚£â‚£ô‚£õ‚†ì‚†æ‚£ü‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†á‚†Ñ‚†ô',
          '‚†Å‚°á‚£û‚£ø‚°ø‚†ã‚†Å‚†Ñ‚†Ñ‚†à‚†â‚†ô‚†õ‚†õ‚†ª‚†ø‚†ø‚†ø‚£∂‚£å‚†ª‚£ø‚£ø‚£ø‚£ø‚£ø‚¢ó‚¢¥‚£Ü‚¢£',
          '‚†∏‚£á‚°ª‚†à‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†à‚¢ª‚£∑‚°å‚¢ø‚£ø‚£ø‚£ø‚¢∏‚†º‚££‚£æ',
          '‚£¶‚°Ä‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢Ä‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†ô‚†õ‚†à‚£ø‚°´‚°º‚¢†‚£æ‚£ø‚£ø',
          '‚£ø‚£á‚†Ñ‚£Ä‚£†‚°Ä‚†Ñ‚†Ñ‚†¥‚†æ‚†ø‚†ø‚†∂‚†∂‚£¶‚£§‚°Ä‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢®‚†Ø‚¢Å‚£ø‚£ø‚£ø‚£ø',
          f'‚£ø‚£ø‚£¶‚¢í‚†§‚£Ö‚°∂‚£∂‚£∂‚£æ‚£ø‚£ø‚£ø‚£∑‚£∂‚£Æ‚£ç‚†¢‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†ê‚¢†‚£æ‚£ø‚£ø‚£ø‚£ø –≤—Ä–µ–º—è —Å–º–µ—Ä—Ç–∏ {current_time}',
          f'‚£ø‚£ø‚£ø‚£ß‚°ê‚†´‚£â‚°ø‚£¨‚°û‚¢ø‚£ø‚¢Ø‚†Ω‚£∂‚°Ω‚¢ü‚£õ‚¢ñ‚£®‚£õ‚†õ‚¢É‚£¥‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø {sign}', sep='\n')
    return


def surrender():
    print('–ù–µ –æ—á–µ–Ω—å —Ç–æ –∏ —Ö–æ—Ç–µ–ª–æ—Å—å üò°')


# endregion

# region –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

def word_convertation(health):
    if health == 1:
        return '–ø–æ–ø—ã—Ç–∫—É'
    elif 1 < health < 5:
        return '–ø–æ–ø—ã—Ç–∫–∏'
    else:
        return '–ø–æ–ø—ã—Ç–æ–∫'

main()